{"version":3,"sources":["Todo.jsx","Todos.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","h5","theme","createMuiTheme","palette","secondary","green","Todo","todo","itemNo","handleDeleteATodo","classes","Card","className","Grid","container","direction","justify","alignItems","wrap","item","CardActionArea","CardContent","Typography","variant","CardActions","ThemeProvider","Button","size","color","onClick","Todos","todos","alignContent","spacing","map","index","key","xs","containerStyle","button","margin","h1Style","marginTop","marginBottom","formStyle","backgroundColor","borderRadius","inputStyle","App","useState","inputText","setInputText","setTodos","Container","onSubmit","e","preventDefault","autoComplete","TextField","type","value","onChange","target","id","label","disabled","startIcon","currentTodos","filter","todoItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac83a0f5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Todo.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport green from \"@material-ui/core/colors/green\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {},\n  h5: {},\n});\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: green,\n  },\n});\n\nconst Todo = ({ todo, itemNo, handleDeleteATodo }) => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"center\"\n        wrap\n      >\n        <Grid item>\n          <CardActionArea>\n            <CardContent>\n              <Typography variant=\"h5\">\n                {itemNo}. {todo}\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n        </Grid>\n        <Grid item>\n          <CardActions>\n            <ThemeProvider theme={theme}>\n              <Button\n                variant=\"contained\"\n                size=\"large\"\n                color=\"secondary\"\n                onClick={() => handleDeleteATodo(todo)}\n              >\n                Done\n              </Button>\n            </ThemeProvider>\n          </CardActions>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"./Todo\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Todos = ({ todos, handleDeleteATodo }) => {\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"center\"\n      alignContent=\"center\"\n      spacing={1}\n    >\n      {todos.map((todo, index) => (\n        <Grid item key={`${todo} + ${index}`} xs={9}>\n          <Todo\n            key={`${todo} + ${index}`}\n            todo={todo}\n            itemNo={++index}\n            handleDeleteATodo={handleDeleteATodo}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Todos;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Todos from \"./Todos\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme) => ({\n  containerStyle: {},\n  button: {\n    margin: theme.spacing(1),\n  },\n  h1Style: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    color: \"black\",\n  },\n  formStyle: {\n    backgroundColor: \"rgba(247, 241, 243,1.0)\",\n    marginBottom: \"10px\",\n    borderRadius: \"20px\",\n  },\n  inputStyle: {\n    borderRadius: \"20px\",\n    margin: theme.spacing(1),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n\n  const addATodo = (e) => {\n    e.preventDefault();\n    setTodos([inputText, ...todos]);\n    setInputText(\"\");\n  };\n\n  const handleDeleteATodo = (todo) => {\n    const currentTodos = todos.filter((todoItem) => todoItem !== todo);\n    setTodos(currentTodos);\n  };\n\n  return (\n    <Container className={classes.containerStyle}>\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          <h1 className={classes.h1Style}>ToDo App</h1>\n        </Grid>\n        <Grid item className={classes.formStyle}>\n          <form onSubmit={addATodo} autoComplete=\"off\">\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <TextField\n                  type=\"text\"\n                  value={inputText}\n                  onChange={(e) => setInputText(e.target.value)}\n                  className={classes.inputStyle}\n                  id=\"outlined-basic\"\n                  label=\"Enter Task\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item>\n                <Button\n                  disabled={!inputText}\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  className={classes.button}\n                  startIcon={<AddCircleOutlineIcon />}\n                >\n                  Add Todo\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Grid>\n\n        <Todos todos={todos} handleDeleteATodo={handleDeleteATodo} />\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}